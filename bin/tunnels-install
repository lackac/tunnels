#!/usr/bin/env ruby
require File.absolute_path("#{File.dirname(__FILE__)}/../lib/tunnels/generator")

require 'fileutils'

common_name = ARGV[0]
raise 'Missing common name' unless common_name

tunnels_port = 50626
ruby_path    = File.join(RbConfig::CONFIG["bindir"], RbConfig::CONFIG["RUBY_INSTALL_NAME"] + RbConfig::CONFIG["EXEEXT"])
gem_path     = File.absolute_path(File.join(File.dirname(__FILE__), '..'))
service_path = File.join(gem_path, 'bin', 'tunnels')

ssl_path = File.join(Dir.home, '.ssl')
FileUtils.mkdir_p(ssl_path)

launchd_path = File.join(Dir.home, 'Library', 'LaunchAgents')
FileUtils.mkdir_p(launchd_path)

# create OpenSSL config file
openssl_config_path = File.join(ssl_path, 'openssl.config')
Tunnels::Generator.new('openssl.config').write(openssl_config_path, common_name => common_name)

# create OpenSSL certificate
openssl_key_path = File.join(ssl_path, "#{common_name}.key")
openssl_crt_path = File.join(ssl_path, "#{common_name}.crt")

if !File.exist?(openssl_key_path) && !File.exist?(openssl_crt_path)
  `openssl req -config #{openssl_config_path} -new -x509 -keyout #{openssl_key_path} -out #{openssl_crt_path} -nodes -days 6500`
  `open '/Applications/Utilities/Keychain Access.app' #{openssl_crt_path}`
end

# create tunnels config file
tunnel_config_path = File.join(ssl_path, 'tunnels.yml')
Tunnels::Generator.new('tunnels.yml').write(tunnel_config_path, common_name: common_name)

# create and load tunnels launchd configation
tunnels_launchd_config_path = File.join(launchd_path, "gem.tunnels.plist")
Tunnels::Generator.new('tunnels.plist').write(tunnels_launchd_config_path, :ruby_path          => ruby_path,
                                                                           :service_path       => service_path,
                                                                           :tunnels_port       => tunnels_port,
                                                                           :tunnel_config_path => tunnel_config_path)
`launchctl load #{tunnels_launchd_config_path}`
