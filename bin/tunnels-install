#!/usr/bin/env ruby

require File.absolute_path("#{File.dirname(__FILE__)}/../lib/tunnels/generator")
require 'fileutils'

raise 'Usage: tunnels-install <domains> [service_path]' unless ARGV.size > 0

domains = ARGV[0].split(',')
service_path = ARGV[1] || $0.sub(/-install$/, '')

tunnels_port = 443

ssl_path = File.join(Dir.home, '.ssl')
FileUtils.mkdir_p(ssl_path)

launchd_path = File.join('/Library', 'LaunchDaemons')
FileUtils.mkdir_p(launchd_path)

# create OpenSSL config file
openssl_config_path = File.join(ssl_path, 'openssl.config')
Tunnels::Generator.new('openssl.config').write(openssl_config_path, :domains => domains)

# create OpenSSL certificate
openssl_key_path = File.join(ssl_path, "tunnels.key")
openssl_crt_path = File.join(ssl_path, "tunnels.crt")

unless File.exists?(openssl_key_path)
  system "openssl genrsa -out #{openssl_key_path} 2048"
end

unless File.exist?(openssl_crt_path)
  system "openssl req -config #{openssl_config_path} -extensions v3_req -new -x509 -key #{openssl_key_path} -out #{openssl_crt_path} -nodes -days 6500"
end

system "sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain #{openssl_crt_path}"

# create tunnels config file
tunnel_config_path = File.join(ssl_path, 'tunnels.yml')
Tunnels::Generator.new('tunnels.yml').write(tunnel_config_path)

# create and load tunnels launchd configation
tunnels_launchd_temp_path = File.join(ssl_path, "gem.tunnels.plist")
tunnels_launchd_config_path = File.join(launchd_path, "gem.tunnels.plist")
Tunnels::Generator.new('tunnels.plist').write(tunnels_launchd_temp_path, :service_path       => service_path,
                                                                           :tunnels_port       => tunnels_port,
                                                                           :tunnel_config_path => tunnel_config_path)
`sudo chown root:wheel #{tunnels_launchd_temp_path}`
`sudo mv #{tunnels_launchd_temp_path} #{tunnels_launchd_config_path}`
`sudo launchctl load -w #{tunnels_launchd_config_path}`
